//Using hashmap
class Solution {
    
    public int[] twoSum(int[] nums, int target) {
       
        HashMap<Integer, Integer> map = new HashMap<>();
        int[] ans = new int[2];
        
        for(int i=0; i<nums.length; i++)
            map.put(nums[i], i);

        for(int i=0; i<nums.length; i++){
            int x = nums[i];
            int y = target - x;
            if(map.containsKey(y) && map.getOrDefault(y,0) != i){
                ans[0] = i;
                ans[1] = map.getOrDefault(y,0);
                break;
            }
        }
        return ans;
    }
}

//Using two pointers

class Solution {
    
    public int[] twoSum(int[] nums, int target) {
        List<Integer> ans = new ArrayList<>();
        int i=0; 
        int j=nums.length -1;
        int n1 = -1;
        int n2 = -1;
        int [] a = new int[nums.length];
        for( i=0; i< nums.length; i++)
            a[i] = nums[i];
        
        Arrays.sort(a);
        while(i<j){
            if((a[i] + a[j] ) == target){
                n1 = a[i];
                n2 = a[j];
                break;
            }else if((a[i] + a[j] ) > target)
                j--;
            else
                i++;
        }
        
        for( i=0; i< nums.length; i++){
            if(nums[i] == n1) 
                ans.add(i);
            else if(nums[i] == n2)
                ans.add(i);
        }
        int[] ab = new int[2];
        for(i=0; i< ans.size(); i++)
            ab[i] = ans.get(i).intValue();
        return ab;
    }
}
