import java.util.* ;
import java.io.*; 
public class Solution {
    public static long merge(long a[],long t[],int l, int m , int h){
    long inv_count=0;
    int i = l;
    int j = m+1;
    int k = l;
         
    while((i <= m) && (j <= h)){
        if(a[i] <= a[j]){
            t[k++] = a[i++];
        }
        else
        {
            t[k++] = a[j++];
            inv_count = inv_count + (m + 1) - i;
        }
    }

    while(i <= m)
        t[k++] = a[i++];

    while(j <= h)
        t[k++] = a[j++];

    for(i = l ; i <= h ; i++)
        a[i] = t[i];
    
    return inv_count;
    }
    
    public static long merge_Sort(long a[],long t[],int l, int h){
        int m;
        long inv_count = 0;
        if(l < h)
        {
             m = (l + h)/2;

            inv_count += merge_Sort(a,t,l,m);
            inv_count += merge_Sort(a,t,m+1,h);

            inv_count += merge(a,t,l,m,h);
        }
        return inv_count;
    }

    //we need a temp array to store the values as well in merge sort
    public static long getInversions(long arr[], int n) {
        // Write your code here.
        long[] t = new long[n];
        long inversions = merge_Sort(arr,t, 0, n-1);
        return inversions;
    }
}
