public class Solution {
 
    public int[] repeatedNumber(final int[] arr) {
        int n = arr.length;
        int xor1;
 
        /* Will have only single set bit of xor1 */
        int set_bit_no;
 
        int i;
        int x = 0;
        int y = 0;
 
        xor1 = arr[0];
 
        /* Get the xor of all array elements  */
        for (i = 1; i < n; i++)
            xor1 = xor1 ^ arr[i];
 
        /* XOR the previous result with numbers from
       1 to n*/
        for (i = 1; i <= n; i++)
            xor1 = xor1 ^ i;
 
        /* Get the rightmost set bit in set_bit_no */
        set_bit_no = xor1 & ~(xor1 - 1);
       
 

        for (i = 0; i < n; i++) {
            if ((arr[i] & set_bit_no) != 0)
                /* arr[i] belongs to first set */
                x = x ^ arr[i];
 
            else
                /* arr[i] belongs to second set*/
                y = y ^ arr[i];
        }
        for (i = 1; i <= n; i++) {
            if ((i & set_bit_no) != 0)
                /* i belongs to first set */
                x = x ^ i;
 
            else
                /* i belongs to second set*/
                y = y ^ i;
        }
        
        int missing =  0;
        int repeat = 0;
        int flag = 0;
        for(i=0; i<n; i++){
            if(x == arr[i]){
                flag = 1;
                break;
            }
                
        }
        
        if(flag == 1){
            missing = y;
            repeat = x;
        }else{
            missing = x;
            repeat = y;
        }
        
        int[] ans = {repeat, missing};
        return ans;
        
    }
}
